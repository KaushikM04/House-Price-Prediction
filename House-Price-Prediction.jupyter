import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
%matplotlib inline
import matplotlib
matplotlib.rcParams["figure.figsize"]=(20,10)
df1=pd.read_csv("Bengaluru_House_Data.csv")
df1.head()
df2=df1.drop(['area_type','society','balcony','availability'],axis='columns')
df2.isnull().sum()
len(df5.location.unique())
df5.location=df5.location.apply(lambda x: x.strip())
location_stats=df5.groupby('location')['location'].agg('count').sort_values(ascending=False)
location_stats
len(location_stats[location_stats<=10])
def remove_pps_outliers(df):
df_out=pd.DataFrame()
for key,subdf in df.groupby('location'):
13
m=np.mean(subdf.price_for_sqft)
st=np.std(subdf.price_for_sqft)
reduced_df=subdf[(subdf.price_for_sqft>(m-st))&(subdf.price_for_sqft<=(m+st))]
df_out=pd.concat([df_out,reduced_df],ignore_index=True)
return df_out
df7=remove_pps_outliers(df6)
df7.shape
def plot_scatter_chart(df,location):
bhk2=df[(df.location==location)&(df.bhk==2)]
bhk3=df[(df.location==location)&(df.bhk==3)]
matplotlib.rcParams['figure.figsize']=(15,10)
plt.scatter(bhk2.total_sqft,bhk2.price_for_sqft,color='blue',label='2 BHK',s=50)
plt.scatter(bhk3.total_sqft,bhk3.price_for_sqft,marker='+',color='green',label='3 BHK',s=50)
plt.xlabel("Total Square Feet Area")
plt.ylabel("Price Per Square Feet")
plt.title(location)
plt.legend()
plot_scatter_chart(df7,"Hebbal")
from sklearn.model_selection import train_test_split
14
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=10)
from sklearn.linear_model import LinearRegression
lr_clf=LinearRegression()
lr_clf.fit(X_train,y_train)
lr_clf.score(X_test,y_test)
from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score
cv=ShuffleSplit(n_splits=5,test_size=0.2,random_state=0)
cross_val_score(LinearRegression(),X,y,cv=cv)
from sklearn.model_selection import GridSearchCV, ShuffleSplit
from sklearn.linear_model import LinearRegression, Lasso
from sklearn.tree import DecisionTreeRegressor
import pandas as pd
def find_best_model_using_gridsearchcv(X, y):
algos = {
'linear_regression': {
'model': LinearRegression(),
'params': {
'fit_intercept': [True, False],
'copy_X': [True, False],
15
'n_jobs': [None, 1, 2, 4], # Add valid values for n_jobs
'positive': [False] # Add valid values for positive
}
},
'lasso': {
'model': Lasso(),
'params': {
'alpha': [1, 2],
'selection': ['random', 'cyclic']
}
},
'decision_tree': {
'model': DecisionTreeRegressor(),
'params': {
'criterion': ['mse', 'friedman_mse'],
'splitter': ['best', 'random']
}
}
}
scores = []
cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)
for algo_name, config in algos.items():
gs = GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)
gs.fit(X, y)
scores.append({
'model': algo_name,
'best_score': gs.best_score_,
'best_params': gs.best_params_
16
})
return pd.DataFrame(scores, columns=['model', 'best_score', 'best_params'])
# Assuming X and y are defined somewhere in your code
find_best_model_using_gridsearchcv(X, y)
def predict_price(location,sqft,bath,bhk):
loc_index=np.where(X.columns==location)[0][0]
x=np.zeros(len(X.columns))
x[0]=sqft
x[1]=bath
x[2]=bhk
if loc_index>=0:
x[loc_index]=1
return lr_clf.predict([x])[0]
